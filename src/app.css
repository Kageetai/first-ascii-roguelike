:root {
  --map-rows: 10;
  --map-cols: 10;
  --transition-duration: 0.3s;
  --app-padding: 2rem;
}

#app {
  padding: var(--app-padding);
  text-align: center;
  font-size: 3dvmin;
}

h1 {
  font-size: 8dvmin;
  margin-bottom: 2dvmin;
  margin-top: 0;
}

.grid {
  display: grid;
  grid-template-columns: repeat(var(--map-rows), 1fr);
  grid-auto-rows: minmax(1em, auto);
  /* calculate the font-size based on the number of columns minus padding and space for heading */
  font-size: calc(
    (100dvmin - var(--app-padding) * 2 - 12dvmin) / var(--map-cols)
  );
  aspect-ratio: 1;
  outline: none;

  /* player color */
  [data-cell="3"],
  [data-cell="2"],
  [data-cell="1"] {
    color: deepskyblue;
  }

  /* enemy color */
  [data-cell="e"] {
    color: orangered;
  }
}

/*   Open state of the dialog  */
dialog[open] {
  opacity: 1;
  min-width: 320px;
}

/*   Closed state of the dialog   */
dialog {
  opacity: 0;
  transition:
    opacity var(--transition-duration) ease-out,
    overlay var(--transition-duration) ease-out allow-discrete,
    display var(--transition-duration) ease-out allow-discrete,
    backdrop-filter var(--transition-duration) allow-discrete;
  /* Equivalent to
    transition: all var(--transition-duration allow-discrete; */
}

/*   Before-open state  */
/* Needs to be after the previous dialog[open] rule to take effect,
    as the specificity is the same */
@starting-style {
  dialog[open] {
    opacity: 0;
  }
}

/* Transition the :backdrop when the dialog modal is promoted to the top layer */
dialog::backdrop {
  background-color: rgb(0 0 0 / 0%);
  transition:
    display var(--transition-duration) allow-discrete,
    overlay var(--transition-duration) allow-discrete,
    background-color var(--transition-duration),
    backdrop-filter var(--transition-duration) allow-discrete;
  /* Equivalent to
    transition: all var(--transition-duration allow-discrete; */
}

dialog[open]::backdrop {
  background-color: rgb(0 0 0 / 25%);
  backdrop-filter: blur(5px);
}

/* This starting-style rule cannot be nested inside the above selector
because the nesting selector cannot represent pseudo-elements. */

@starting-style {
  dialog[open]::backdrop {
    background-color: rgb(0 0 0 / 0%);
  }
}
